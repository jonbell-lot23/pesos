generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Source {
  id       Int        @id @default(autoincrement())
  url      String
  emoji    String
  userid   Int
  User     User       @relation(fields: [userid], references: [id])
  firehose firehose[]
}

model User {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now())
  Source    Source[]
  firehose  firehose[]
}

model firehose {
  id          Int      @id @default(autoincrement())
  title       String
  url         String
  description String?
  postdate    DateTime
  source      String?
  slug        String?  @unique @default("")
  userid      Int      @default(1)
  sourceId    Int?
  Source      Source?  @relation(fields: [sourceId], references: [id])
  User        User     @relation(fields: [userid], references: [id], onDelete: SetNull)
}

model pesos_items {
  id            Int            @id @default(autoincrement())
  title         String
  url           String
  description   String?
  postdate      DateTime
  source        String?
  slug          String         @unique(map: "pesos_items_slug_field_key")
  userId        String
  sourceId      Int?
  pesos_Sources pesos_Sources? @relation(fields: [sourceId], references: [id])
  pesos_User    pesos_User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sourceId, postdate])
  @@index([userId, url])
}

model pesos_User {
  id          String              @id
  username    String              @unique
  createdAt   DateTime            @default(now())
  sources     pesos_UserSources[]
  pesos_items pesos_items[]
  linkPages   LinkPage[]
}

model pesos_Sources {
  id          Int                 @id @default(autoincrement())
  url         String              @unique
  active      String              @default("Y")
  users       pesos_UserSources[]
  pesos_items pesos_items[]
}

model pesos_UserSources {
  userId    String
  sourceId  Int
  createdAt DateTime      @default(now())
  source    pesos_Sources @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  user      pesos_User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, sourceId])
}

model Backup {
  id         Int      @id @default(autoincrement())
  timestamp  DateTime @default(now())
  storyCount Int      @default(0)
}

model pesos_SystemStatus {
  id              Int       @id @default(autoincrement())
  key             String    @unique
  lastRun         DateTime?
  status          String    @default("idle")
  lastError       String?
  newItemsCount   Int       @default(0)
  processedFeeds  Int       @default(0)
  executionTimeMs Int       @default(0)
}

// Activity logging tables for comprehensive system tracking
model ActivityLog {
  id        Int          @id @default(autoincrement())
  timestamp DateTime     @default(now())
  eventType String       // "user_created", "user_login", "system_update", "feed_sync", etc.
  userId    String?      // Optional - for user-specific events
  metadata  Json?        // Flexible JSON field for event-specific data
  ipAddress String?
  userAgent String?
  duration  Int?         // Duration in milliseconds for events that have duration
  success   Boolean      @default(true)
  errorMessage String?   // For failed events
  source    String?      // "web", "api", "cron", etc.
  
  @@index([timestamp])
  @@index([eventType])
  @@index([userId])
  @@index([success])
}

model pesos_SystemUpdateLog {
  id               Int      @id @default(autoincrement())
  timestamp        DateTime @default(now())
  totalFeeds       Int      @default(0)
  processedFeeds   Int      @default(0)
  failedFeeds      Int      @default(0)
  newItems         Int      @default(0)
  executionTimeMs  Int      @default(0)
  triggeredBy      String?  // "cron", "manual", "api"
  errors           Json?    // Store any errors that occurred
  summary          String?  // Human-readable summary
  
  @@index([timestamp])
}

model UserSessionLog {
  id          Int      @id @default(autoincrement())
  timestamp   DateTime @default(now())
  userId      String
  action      String   // "login", "logout", "session_refresh"
  ipAddress   String?
  userAgent   String?
  sessionId   String?
  duration    Int?     // For logout events, duration of session
  
  @@index([timestamp])
  @@index([userId])
  @@index([action])
}

model EmailSignup {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
}

model LinkPage {
  id        Int      @id @default(autoincrement())
  userId    String
  slug      String   @unique
  title     String
  createdAt DateTime @default(now())
  links     Link[]
  pesos_User pesos_User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Link {
  id        Int      @id @default(autoincrement())
  pageId    Int
  title     String
  url       String
  order     Int      @default(0)
  LinkPage  LinkPage @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([pageId])
}
